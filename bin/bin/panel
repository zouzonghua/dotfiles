#! /bin/sh
export PANEL_FIFO=/tmp/panel-fifo
export PANEL_HEIGHT=24
export PANEL_FONT_2="Wen Quan Yi Zen Hei:style=regular:pixelsize=14"
export PANEL_FONT_1="Roboto Medium:style=regular:pixelsize=14"
export PANEL_FONT="DejaVuSansMono Nerd Font:pixelsize=14"
export PANEL_WM_NAME=bspwm_panel

# Check for dependencies.  Fail if unmet.
_checkdep() {
    command -v "$1" > /dev/null || { echo "Missing dependency: $1"; exit 1; }
}

if xdo id -a "$PANEL_WM_NAME" > /dev/null ; then
	printf "%s\n" "The panel is already running." >&2
	exit 1
fi

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"


# Colours
# -------
# Taken from my Modus Vivendi (Modus themes for Emacs):
# https://gitlab.com/protesilaos/modus-themes
bg_main="#000000"
bg_alt="#181a20"
fg_main="#ffffff"
fg_alt="#a8a8a8"
red="#ff8059"
green="#58dd13"
yellow="#f0ce43"

# Battery status
_battery() {
   command -v acpi > /dev/null || return 1

    local label command status output

    label=''
    # Using Bash parameter expansion here.  Just experimenting…
    command="$(acpi -b)"
    status="${command#*: }"    # Delete up the colon and following space
    status="${status:0:1}"     # Use first character
    output="${command#*, }"    # Delete up to first comma
    output="${output%,*}"      # Same but read from the end

    if [ "$(echo "$output" | tr -d "%")" -gt 90 ]; then
      label=""
    elif [ "$(echo "$output" | tr -d "%")" -gt 70 ]; then
      label=""
    elif [ "$(echo "$output" | tr -d "%")" -gt 35 ]; then
      label=""
    elif [ "$(echo "$output" | tr -d "%")" -gt 20 ]; then
      label=""
    else
      label=""
    fi

    label="B:"
    # The $battery_status will tell us if it is (C)harging or
    # (D)ischaging.  If dischange level reaches 0-9, the whole indicator
    # will turn to a bright colour.  Otherwise, discharging will be
    # denoted by a coloured output of the current level followed by the
    # minus sign.

    case "$status" in
        'C')
            label="${label}"
            echo "%{F$fg_alt}${label}%{F-} %{F$green}${output}+ %{F-}"
            ;;
        'D')
            case "${output%?}" in
                [0-9])
                    echo "%{B$yellow}%{F$bg_main} $label ${output} -%{F-}%{B-}"
                    ;;
                *)
                    echo "%{F$fg_alt}${label}%{F-} %{F$yellow}${output} -%{F-}"
                    ;;
            esac
            ;;
        *)
            echo "%{F$fg_alt}${label}%{F-} ${output}"
            ;;
    esac

}

# Core temperature.
_temperature() {
    command -v acpi > /dev/null || return 1

    local label command output

    label='T:'
    # Use Bash parameter expansion again…
    command="$(acpi -t)"
    output="${command#*: }"
    output="${output#*, }"
    output="${output:0:2}"

    # Up to 59 degrees celsius keep text colour same as default.  60-79
    # turn the colour red on normal background.  Else turn the whole
    # indicator red.
    case "$output" in
        [12345][0-9])
            echo "%{F$fg_alt}${label}%{F-} ${output}°C"
            ;;
        [67][0-9])
            echo "%{F$fg_alt}${label}%{F-} %{F$red}${output}°C%{F-}"
            ;;
        *)
            echo "%{F$bg_main}%{B$red} $label ${output}°C %{B-}%{F-}"
            ;;
    esac
}

# Check the sound volume and whether it is muted or not.  Output the
# appropriate indicators.
_volume() {
    command -v amixer > /dev/null || return 1

    local label vol mute output

    label='V:'
    vol="$(pactl get-sink-volume 0 | grep "front-left" | awk '{ print $5 }')"
    mute="$(pactl get-sink-mute 0 | grep "Mute" | awk '{print $2}')"
    output="$vol"

    if [ "$mute" = "yes" ]; then
      label=""
      output=" 0%"
    elif [ "$(echo "$vol" | tr -d "%")" -gt 70 ]; then
      label=""
    elif [ "$(echo "$vol" | tr -d "%")" -gt 35 ]; then
      label=""
    else
      label=""
    fi

    label="V:"

    echo "%{F$fg_alt}${label}%{F-} $output"
}


_datetime() {
    local label output

    label='D:'
    output="$(date +'%Y/%m/%d %H:%M')"

    echo "%{F$fg_alt}${label}%{F-} $output"
}

_modules() {
    while true; do
        echo "B" "$(_battery)"
        echo "T" "$(_temperature)"
        echo "D" "$(_datetime)"
        echo "V" "$(_volume)"
        sleep 1s
    done
}

xtitle -sf 'X%s\n' > "$PANEL_FIFO" &
_modules > "$PANEL_FIFO" &
bspc subscribe report > "$PANEL_FIFO" &

. panel_colors

panel_bar < "$PANEL_FIFO" | lemonbar -a 32 -u 2 -n "$PANEL_WM_NAME" -g x$PANEL_HEIGHT -f "$PANEL_FONT" -f "$PANEL_FONT_2" -F "$COLOR_DEFAULT_FG" -B "$COLOR_DEFAULT_BG" | sh &

wid=$(xdo id -m -a "$PANEL_WM_NAME")
xdo above -t "$(xdo id -N Bspwm -n root | sort | head -n 1)" "$wid"

wait
